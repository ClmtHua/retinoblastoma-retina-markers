select(term, gene, ID)
df_markers_TopMarkers_GMT %>% count(term)
fn_enrichment_ORA(GMT_file = df_markers_TopMarkers_GMT,
markers = df_DEG_singlecell, all.genes = BackgroundGenes_singlecell, #BackgroundGenes_singlecell,
minGSSize = 3, maxGSSize = 500, pvalueCutoff = 1, qvalueCutoff = 0.2)
fn_enrichment_ORA(GMT_file = df_markers_TopMarkers_GMT,
markers = df_DEG_singlecell, all.genes = BackgroundGenes_singlecell, #BackgroundGenes_singlecell,
minGSSize = 3, maxGSSize = 500, pvalueCutoff = 1, qvalueCutoff = 1)
ORA_SingleCell_noCutoff <- fn_enrichment_ORA(GMT_file = df_markers_TopMarkers_GMT,
markers = df_DEG_singlecell, all.genes = BackgroundGenes_singlecell, #BackgroundGenes_singlecell,
minGSSize = 3, maxGSSize = 500, pvalueCutoff = 1, qvalueCutoff = 1)
ORA_SingleCell_noCutoff$df_annotation
df_markers_TopMarkers <- df_markers_final_PR_all_biomart %>% # df_markers_final %>%
filter(avg_logFC > 1)#1)
df_markers_TopMarkers_GMT <- df_markers_TopMarkers %>%
mutate(ID = cluster, term = cluster) %>%
select(term, gene, ID)
count(df_markers_TopMarkers_GMT, term)
count(RetinalGenes_GMT, term)
ORA_SingleCell_noCutoff <- fn_enrichment_ORA(GMT_file = df_markers_TopMarkers_GMT,
markers = df_DEG_singlecell, all.genes = BackgroundGenes_singlecell, #BackgroundGenes_singlecell,
minGSSize = 3, maxGSSize = 500, pvalueCutoff = 1, qvalueCutoff = 1)
ORA_SingleCell_noCutoff$df_annotation
fn_enrichment_ORA(GMT_file = df_markers_TopMarkers_GMT,
markers = df_DEG_singlecell, all.genes = BackgroundGenes_singlecell, #BackgroundGenes_singlecell,
minGSSize = 3, maxGSSize = 500, pvalueCutoff = 1, qvalueCutoff = 1)
## Get Top markers
df_markers_TopMarkers_min25 <- df_markers_final_PR_all_biomart %>%
ungroup() %>% group_by(cluster) %>%
filter(avg_logFC > 1 | rank(desc(avg_logFC)) <= 25)
df_markers_TopMarkers_min25_GMT <- df_markers_TopMarkers_min25 %>%
ungroup()%>%
mutate(ID = cluster, term = cluster) %>%
select(term, gene, ID)
df_markers_TopMarkers_GMT_min25 %>% count(term)
fn_enrichment_ORA(GMT_file = df_markers_TopMarkers_min25_GMT,
markers = df_DEG_singlecell, all.genes = BackgroundGenes_singlecell, #BackgroundGenes_singlecell,
minGSSize = 3, maxGSSize = 500, pvalueCutoff = 1, qvalueCutoff = 1)
df_markers_TopMarkers <- df_markers_final_PR_all_biomart %>% # df_markers_final %>%
filter(avg_logFC > 1)#1)
df_markers_TopMarkers_GMT <- df_markers_TopMarkers %>%
mutate(ID = cluster, term = cluster) %>%
select(term, gene, ID)
count(df_markers_TopMarkers_GMT, term)
df_DEG_singlecell <- read_csv("../data/ForEnrichmentAnalysis/DEG_SingleCell.csv")
BackgroundGenes_singlecell <- read_tsv("../data/ForEnrichmentAnalysis/BackgroundGenes_singlecell.tsv", col_names = F)$X1 # Correspond to rownames(<RB_SC11 seurat object>)
ORA_SingleCell <- fn_enrichment_ORA(GMT_file = df_markers_TopMarkers_GMT,
markers = df_DEG_singlecell, all.genes = BackgroundGenes_singlecell, #BackgroundGenes_singlecell,
minGSSize = 3, maxGSSize = 500, pvalueCutoff = 0.05, qvalueCutoff = 0.2)
ORA_SingleCell
ORA_SingleCell_min25 <- fn_enrichment_ORA(GMT_file = df_markers_TopMarkers_min25_GMT,
markers = df_DEG_singlecell, all.genes = BackgroundGenes_singlecell, #BackgroundGenes_singlecell,
minGSSize = 3, maxGSSize = 500, pvalueCutoff = 1, qvalueCutoff = 1)
ORA_SingleCell_min25
ORA_SingleCell_min25 %>%
filter(p.adjust < 0.05)
ORA_SingleCell_min25$df_annotation %>%
filter(p.adjust < 0.05)
ORA_SingleCell_noCutoff <- fn_enrichment_ORA(GMT_file = df_markers_TopMarkers_GMT,
markers = df_DEG_singlecell, all.genes = BackgroundGenes_singlecell, #BackgroundGenes_singlecell,
minGSSize = 3, maxGSSize = 500, pvalueCutoff = 0.05, qvalueCutoff = 1)
ORA_SingleCell_noCutoff$df_annotation
ORA_SingleCell_min25_noCutoff <- fn_enrichment_ORA(GMT_file = df_markers_TopMarkers_min25_GMT,
markers = df_DEG_singlecell, all.genes = BackgroundGenes_singlecell, #BackgroundGenes_singlecell,
minGSSize = 3, maxGSSize = 500, pvalueCutoff = 1, qvalueCutoff = 1)
ORA_SingleCell_min25 <- fn_enrichment_ORA(GMT_file = df_markers_TopMarkers_min25_GMT,
markers = df_DEG_singlecell, all.genes = BackgroundGenes_singlecell, #BackgroundGenes_singlecell,
minGSSize = 3, maxGSSize = 500, pvalueCutoff = 0.05, qvalueCutoff = 1)
ORA_SingleCell_min25$df_annotation %>%
filter(p.adjust < 0.05)
library(openxlsx)
ORA_SingleCell_noCutoff$df_annotation
ORA_SingleCell_noCutoff <- fn_enrichment_ORA(GMT_file = df_markers_TopMarkers_GMT,
markers = df_DEG_singlecell, all.genes = BackgroundGenes_singlecell, #BackgroundGenes_singlecell,
minGSSize = 3, maxGSSize = 500, pvalueCutoff = 1, qvalueCutoff = 1)
ORA_SingleCell_noCutoff$df_annotation
ORA_SingleCell <- fn_enrichment_ORA(GMT_file = df_markers_TopMarkers_GMT,
markers = df_DEG_singlecell, all.genes = BackgroundGenes_singlecell, #BackgroundGenes_singlecell,
minGSSize = 3, maxGSSize = 500, pvalueCutoff = 0.05, qvalueCutoff = 0.2)
ORA_SingleCell$df_annotation
ORA_SingleCell$df_annotation %>%
write_tsv("../results/FinalTables/FindMarkers_padjCutoff_simplefilter.tsv")
ORA_SingleCell_noCutoff <- fn_enrichment_ORA(GMT_file = df_markers_TopMarkers_GMT,
markers = df_DEG_singlecell, all.genes = BackgroundGenes_singlecell, #BackgroundGenes_singlecell,
minGSSize = 3, maxGSSize = 500, pvalueCutoff = 1, qvalueCutoff = 1)
ORA_SingleCell_noCutoff$df_annotation %>%
write_tsv("../results/FinalTables/FindMarkers_NoCutoff_simplefilter.tsv")
## Get Top markers
df_markers_TopMarkers_min25 <- df_markers_final_PR_all_biomart %>%
ungroup() %>% group_by(cluster) %>%
filter(avg_logFC > 1 | rank(desc(avg_logFC)) <= 25)
df_markers_TopMarkers_min25_GMT <- df_markers_TopMarkers_min25 %>%
ungroup()%>%
mutate(ID = cluster, term = cluster) %>%
select(term, gene, ID)
ORA_SingleCell_min25 <- fn_enrichment_ORA(GMT_file = df_markers_TopMarkers_min25_GMT,
markers = df_DEG_singlecell, all.genes = BackgroundGenes_singlecell, #BackgroundGenes_singlecell,
minGSSize = 3, maxGSSize = 500, pvalueCutoff = 0.05, qvalueCutoff = 1)
ORA_SingleCell_min25$df_annotation %>%
filter(p.adjust < 0.05)
ORA_SingleCell_min25_noCutoff <- fn_enrichment_ORA(GMT_file = df_markers_TopMarkers_min25_GMT,
markers = df_DEG_singlecell, all.genes = BackgroundGenes_singlecell, #BackgroundGenes_singlecell,
minGSSize = 3, maxGSSize = 500, pvalueCutoff = 1, qvalueCutoff = 1)
ORA_SingleCell_min25_noCutoff$df_annotation %>%
filter(p.adjust < 0.05)
ORA_SingleCell_min25_noCutoff$df_annotation
df_MatchingMarkers <- read_csv("../data/MatchingAnnotation_Liu_Lu.csv")
list_conversion_annotation <- setNames(df_MatchingMarkers$Lu, df_MatchingMarkers$Liu)
RetinalGenes_GMT_legend <- RetinalGenes_GMT %>%
mutate(term = as.character(term), ID = as.character(ID))%>%
mutate(ID = ifelse(is.na(list_conversion_annotation[ID]), yes = ID, no = list_conversion_annotation[ID]))%>%
group_by(gene) %>%
summarise(Liu_Markers = str_c(ID, collapse = "-"))
count(df_markers_final_PR_all_v2, cluster)
df_markers_final <- df_markers_final_PR_all_biomart %>%
mutate(cluster = str_remove(cluster, "_common") %>% str_remove("_exclusive"))
count(df_markers_final, cluster)
df_markers_TopMarkers <- df_markers_final %>%
filter(avg_logFC > 1)
Lu_AllMarkers_legend <- df_markers_final %>%
group_by(gene) %>%
summarise(annotation = str_c(cluster, collapse = "-")) %>%
rename(Lu_AllMarkers = annotation)
df_markers_compare <- RetinalGenes_GMT_legend %>%
left_join(Lu_AllMarkers_legend, by = "gene")
df_splitted <- df_markers_compare %>%
mutate_at(vars(contains("Markers")), str_split, pattern = "-")%>%
as.data.frame()
names(df_splitted)
l_common_AllMarkers <- sapply(1:dim(df_splitted)[1], function(i){intersect(df_splitted[[i, 2]], df_splitted[[i, 3]]) %>% str_c(collapse = "-")})
l_SetDiff_inLiu_AllMarkers <- sapply(1:dim(df_splitted)[1], function(i){setdiff(df_splitted[[i, 2]], df_splitted[[i, 3]]) %>% str_c(collapse = "-")})
l_SetDiff_inLu_AllMarkers <- sapply(1:dim(df_splitted)[1], function(i){setdiff(df_splitted[[i, 3]], df_splitted[[i, 2]]) %>% str_c(collapse = "-")})
l_common_test_AllMarkers <- sapply(1:dim(df_splitted)[1], function(i){
len_inter <- intersect(df_splitted[[i, 2]], df_splitted[[i, 3]]) %>% length()
len_Lu <- length(df_splitted[[i, 2]])
return(len_Lu == len_inter)
})
df_matching_AllMarkers <- mutate(df_markers_compare,
common = l_common_AllMarkers, test_match = l_common_test_AllMarkers,
additional_Liu = l_SetDiff_inLiu_AllMarkers, additional_Lu = l_SetDiff_inLu_AllMarkers) %>%
mutate(Matching_AllMarkers =  ifelse(test = is.na(Lu_AllMarkers), yes = "Not a marker",
no = ifelse(test_match == TRUE, yes = ifelse(test = additional_Lu == "", yes = "Perfect Match", no = "Other Lu annotation"),
no = ifelse(test = common == "", yes = "No match", no = "Partial Match")))) %>%
arrange(Matching_AllMarkers) %>%
select(gene, Liu_Markers, Lu_AllMarkers, Matching_AllMarkers)
#View(df_matching_AllMarkers)aa
df_matching_AllMarkers %>%
count(Matching_AllMarkers)
l_common_AllMarkers <- sapply(1:dim(df_splitted)[1], function(i){intersect(df_splitted[[i, 2]], df_splitted[[i, 3]]) %>% str_c(collapse = "-")})
l_SetDiff_inLiu_AllMarkers <- sapply(1:dim(df_splitted)[1], function(i){setdiff(df_splitted[[i, 2]], df_splitted[[i, 3]]) %>% str_c(collapse = "-")})
l_SetDiff_inLu_AllMarkers <- sapply(1:dim(df_splitted)[1], function(i){setdiff(df_splitted[[i, 3]], df_splitted[[i, 2]]) %>% str_c(collapse = "-")})
l_common_test_AllMarkers <- sapply(1:dim(df_splitted)[1], function(i){
len_inter <- intersect(df_splitted[[i, 2]], df_splitted[[i, 3]]) %>% length()
len_Lu <- length(df_splitted[[i, 2]])
return(len_Lu == len_inter)
})
df_MatchingMarkers
l_AnnotNotPresent <- filter(df_MatchingMarkers, is.na(Liu))$Lu
l_AnnotNotPresent
mutate(df_markers_compare,
common = l_common_AllMarkers, test_match = l_common_test_AllMarkers,
additional_Liu = l_SetDiff_inLiu_AllMarkers, additional_Lu = l_SetDiff_inLu_AllMarkers)
mutate(df_markers_compare,
common = l_common_AllMarkers, test_match = l_common_test_AllMarkers,
additional_Liu = l_SetDiff_inLiu_AllMarkers, additional_Lu = l_SetDiff_inLu_AllMarkers) %>% View()
mutate(df_markers_compare, common = l_common_AllMarkers, test_match = l_common_test_AllMarkers,
additional_Liu = l_SetDiff_inLiu_AllMarkers, additional_Lu = l_SetDiff_inLu_AllMarkers)
l_SetDiff_inLu_AllMarkers
l_SetDiff_inLu_AllMarkers_RemoveNotPresent <- sapply(1:dim(df_splitted)[1], function(i){setdiff(df_splitted[[i, 3]], df_splitted[[i, 2]]) %>% str_c(collapse = "-")})
l_SetDiff_inLu_AllMarkers_RemoveNotPresent
l_AnnotNotPresent
l_SetDiff_inLu_AllMarkers_RemoveNotPresent <- sapply(1:dim(df_splitted)[1], function(i){setdiff(df_splitted[[i, 3]], df_splitted[[i, 2]]) %>% str_c(collapse = "-")})
df_splitted
l_SetDiff_inLu_AllMarkers_RemoveNotPresent <- sapply(1:dim(df_splitted)[1], function(i){setdiff(df_splitted[[i, 3]], df_splitted[[i, 2]]) %>% setdiff(l_AnnotNotPresent) %>% str_c(collapse = "-")})
l_SetDiff_inLu_AllMarkers_RemoveNotPresent
df_matching_AllMarkers <- mutate(df_markers_compare, common = l_common_AllMarkers, test_match = l_common_test_AllMarkers,
additional_Liu = l_SetDiff_inLiu_AllMarkers,
additional_Lu = l_SetDiff_inLu_AllMarkers_RemoveNotPresent) %>%
mutate(Matching_AllMarkers =  ifelse(test = is.na(Lu_AllMarkers), yes = "Not found as a marker",
no = ifelse(test_match == TRUE, yes = ifelse(test = additional_Lu == "", yes = "Perfect Match", no = "Other Lu annotation"),
no = ifelse(test = common == "", yes = "No match", no = "Partial Match")))) %>%
arrange(Matching_AllMarkers) %>%
select(gene, Liu_Markers, Lu_AllMarkers, Matching_AllMarkers)
#View(df_matching_AllMarkers)aa
df_matching_AllMarkers %>%
count(Matching_AllMarkers)
df_matching_AllMarkers
#View(df_matching_AllMarkers)aa
df_matching_AllMarkers %>% View()
l_SetDiff_inLiu_AllMarkers_RemoveNotPresent <- sapply(1:dim(df_splitted)[1], function(i){setdiff(df_splitted[[i, 2]], df_splitted[[i, 3]])  %>% setdiff(c("RPE")) %>% str_c(collapse = "-")})
l_SetDiff_inLiu_AllMarkers_RemoveNotPresent
l_common_AllMarkers <- sapply(1:dim(df_splitted)[1], function(i){intersect(df_splitted[[i, 2]], df_splitted[[i, 3]]) %>% str_c(collapse = "-")})
l_SetDiff_inLiu_AllMarkers <- sapply(1:dim(df_splitted)[1], function(i){setdiff(df_splitted[[i, 2]], df_splitted[[i, 3]]) %>% str_c(collapse = "-")})
l_SetDiff_inLu_AllMarkers <- sapply(1:dim(df_splitted)[1], function(i){setdiff(df_splitted[[i, 3]], df_splitted[[i, 2]]) %>% str_c(collapse = "-")})
l_SetDiff_inLiu_AllMarkers_RemoveNotPresent <- sapply(1:dim(df_splitted)[1], function(i){setdiff(df_splitted[[i, 2]], df_splitted[[i, 3]])  %>% setdiff(c("RPE")) %>% str_c(collapse = "-")})
l_SetDiff_inLu_AllMarkers_RemoveNotPresent <- sapply(1:dim(df_splitted)[1], function(i){setdiff(df_splitted[[i, 3]], df_splitted[[i, 2]]) %>% setdiff(l_AnnotNotPresent) %>% str_c(collapse = "-")})
l_common_test_AllMarkers <- sapply(1:dim(df_splitted)[1], function(i){
len_inter <- intersect(df_splitted[[i, 2]], df_splitted[[i, 3]]) %>% length()
len_Lu <- length(df_splitted[[i, 2]])
return(len_Lu == len_inter)
})
df_matching_AllMarkers <- mutate(df_markers_compare, common = l_common_AllMarkers, test_match = l_common_test_AllMarkers,
additional_Liu = l_SetDiff_inLiu_AllMarkers,
additional_Lu = l_SetDiff_inLu_AllMarkers) %>%
mutate(Matching_AllMarkers =  ifelse(test = is.na(Lu_AllMarkers), yes = "Not found as a marker",
no = ifelse(test_match == TRUE, yes = ifelse(test = additional_Lu == "", yes = "Perfect Match", no = "Other Lu annotation"),
no = ifelse(test = common == "", yes = "No match", no = "Partial Match")))) %>%
arrange(Matching_AllMarkers) %>%
select(gene, Liu_Markers, Lu_AllMarkers, Matching_AllMarkers)
#View(df_matching_AllMarkers)aa
df_matching_AllMarkers %>% View()
count(Matching_AllMarkers)
l_common_AllMarkers <- sapply(1:dim(df_splitted)[1], function(i){intersect(df_splitted[[i, 2]], df_splitted[[i, 3]]) %>% str_c(collapse = "-")})
l_SetDiff_inLiu_AllMarkers_RemoveNotPresent <- sapply(1:dim(df_splitted)[1], function(i){setdiff(df_splitted[[i, 2]], df_splitted[[i, 3]])  %>% setdiff(c("RPE")) %>% str_c(collapse = "-")})
l_SetDiff_inLu_AllMarkers_RemoveNotPresent <- sapply(1:dim(df_splitted)[1], function(i){setdiff(df_splitted[[i, 3]], df_splitted[[i, 2]]) %>% setdiff(l_AnnotNotPresent) %>% str_c(collapse = "-")})
l_common_test_AllMarkers_RemoveNotPresent <- sapply(1:dim(df_splitted)[1], function(i){
len_inter <- intersect(df_splitted[[i, 2]], df_splitted[[i, 3]]) %>% length()
len_Lu <- length(df_splitted[[i, 2]])
return(len_Lu == len_inter)
})
df_matching_AllMarkers_RemoveNotPresent <- mutate(df_markers_compare, common = l_common_AllMarkers, test_match = l_common_test_AllMarkers,
additional_Liu = l_SetDiff_inLiu_AllMarkers_RemoveNotPresent,
additional_Lu = l_SetDiff_inLu_AllMarkers_RemoveNotPresent) %>%
mutate(Matching_AllMarkers =  ifelse(test = is.na(Lu_AllMarkers), yes = "Not found as a marker",
no = ifelse(test_match == TRUE, yes = ifelse(test = additional_Lu == "", yes = "Perfect Match", no = "Other Lu annotation"),
no = ifelse(test = common == "", yes = "No match", no = "Partial Match")))) %>%
arrange(Matching_AllMarkers) %>%
select(gene, Liu_Markers, Lu_AllMarkers, Matching_AllMarkers)
#View(df_matching_AllMarkers)aa
df_matching_AllMarkers_RemoveNotPresent %>% View()
count(Matching_AllMarkers)
df_matching_AllMarkers_RemoveNotPresent <- mutate(df_markers_compare, common = l_common_AllMarkers, test_match = l_common_test_AllMarkers,
additional_Liu = l_SetDiff_inLiu_AllMarkers_RemoveNotPresent,
additional_Lu = l_SetDiff_inLu_AllMarkers_RemoveNotPresent) %>%
mutate(Matching_AllMarkers =  ifelse(test = is.na(Lu_AllMarkers), yes = "Not found as a marker",
no = ifelse(test_match == TRUE, yes = ifelse(test = additional_Lu == "", yes = "Perfect Match", no = "Other Lu annotation"),
no = ifelse(test = common == "", yes = "No match", no = "Partial Match")))) %>%
arrange(Matching_AllMarkers) %>%
select(gene, Liu_Markers, Lu_AllMarkers, Matching_AllMarkers)
#View(df_matching_AllMarkers)aa
df_matching_AllMarkers_RemoveNotPresent %>% View()
#View(df_matching_AllMarkers)aa
df_matching_AllMarkers_RemoveNotPresent %>% View()
df_matching_AllMarkers_RemoveNotPresent
#View(df_matching_AllMarkers)aa
df_matching_AllMarkers_RemoveNotPresent %>% View()
library(Seurat)
library(reshape2)
library(clusterProfiler)
library(biomaRt)
library(tidyverse)
RetinalGenes_GMT <- clusterProfiler::read.gmt("../data/RetinalMarkers.gmt")#"data/RetinalMarkers.gmt")
RetinalGenes_GMT <- RetinalGenes_GMT %>%
mutate(ID = term)
df_MatchingMarkers <- read_csv("../data/MatchingAnnotation_Liu_Lu.csv")
list_conversion_annotation <- setNames(df_MatchingMarkers$Lu, df_MatchingMarkers$Liu)
RetinalGenes_GMT_legend <- RetinalGenes_GMT %>%
mutate(term = as.character(term), ID = as.character(ID))%>%
mutate(ID = ifelse(is.na(list_conversion_annotation[ID]), yes = ID, no = list_conversion_annotation[ID]))%>%
group_by(gene) %>%
summarise(Liu_Markers = str_c(ID, collapse = "-"))
GSE138002_exp_mat <- Matrix::readMM("../data/GSE138002_Final_matrix.mtx.gz")
GSE138002_features <- read_csv2("../data/GSE138002_genes.csv.gz")
GSE138002_barcodes <- read_csv2("../data/GSE138002_Final_barcodes.csv.gz")
GSE138002_exp_mat <- as(GSE138002_exp_mat, "dgCMatrix")
rownames(GSE138002_exp_mat) <- GSE138002_features$gene_short_name
colnames(GSE138002_exp_mat) <- GSE138002_barcodes$barcode
df_metadata <- GSE138002_barcodes %>%
select(barcode, sample, age, sample_type, starts_with("umap"), num_genes_expressed,Total_mRNAs) %>%
as.data.frame()
rownames(df_metadata) <- df_metadata$barcode
SO_Lu2020 <- CreateSeuratObject(counts = GSE138002_exp_mat, meta.data = df_metadata)
SO_Lu2020 <- NormalizeData(SO_Lu2020)
gc()
df_markers_final <- read_tsv("../results/df_markers_final.tsv") %>%
filter(p_val_adj < 0.05)
df_markers_final_PR_partial <- df_markers_final %>%
filter(cluster %in% c("Rods", "Cones", "Photoreceptor")) %>%
ungroup()%>%
group_by(gene) %>%
mutate(cluster_2 = str_c(cluster, collapse = "-"))%>%
mutate(cluster_2 = ifelse(cluster_2 %in% c("Cones-Rods-Photoreceptor", "Photoreceptor"), yes = "Photoreceptor_common",
no = str_remove(cluster_2, "(Photoreceptor)") %>% str_remove_all("-") %>% str_c("_exclusive")))
df_markers_final_PR_partial <- df_markers_final_PR_partial %>%
mutate(cluster_2 = cluster_2  %>% str_remove("_common") %>% str_remove("_exclusive"))
df_markers_final_PR <- df_markers_final_PR_partial  %>%
filter(str_detect(cluster_2, cluster)) %>%
mutate(cluster = cluster_2) %>% select(- cluster_2)
df_markers_final_PR_all <- df_markers_final %>%
filter(!(cluster %in% c("Rods", "Cones", "Photoreceptor"))) %>%
bind_rows(df_markers_final_PR)
#write_tsv(df_markers_final_PR_all_v2, "../results/Markers_Alternative/FilteringCommon/df_markers_final_PR_FilteringCommon.tsv")
df_markers_final_PR_all
View(df_markers_final_PR_all)
mart = useMart("ensembl", dataset="hsapiens_gene_ensembl")
#biomaRt::listAttributes(mart) %>% View
attributes_biomart <- c("external_gene_name", "description", "chromosome_name", "band")
list_genes <- df_markers_final_PR_all$gene %>% unique() #length(list_genes) # 4194
out_biomart <- getBM(attributes = attributes_biomart,
filters = "external_gene_name",
values = list_genes,
mart = mart)
out_biomart_filter <- out_biomart %>%
filter(str_detect(chromosome_name, "^CHR_", negate = T))%>%
add_count(external_gene_name) %>%
arrange(desc(n)) %>%
filter(!(description %in% c("zinc finger protein 883 [Source:NCBI gene (formerly Entrezgene);Acc:169834]",
"PRICKLE2 antisense RNA 1 [Source:HGNC Symbol;Acc:HGNC:40916]"))) %>%
dplyr::select(-n)
df_markers_final_PR_all_biomart <- df_markers_final_PR_all %>%
left_join(out_biomart_filter, by = c("gene" = "external_gene_name")) %>%
dplyr::select(cluster, gene,p_val, p_val_adj, everything())
write_tsv(df_markers_final_PR_all_biomart, file = "../results/FinalTables/df_markers_Lu2020.tsv")
df_markers_final_PR_all_biomart %>%
count(cluster)
read_tsv("../../Liu2021_Subtyoes/DEG_SingleCell.csv")
read_csv("../../Liu2021_Subtyoes/DEG_SingleCell.csv")
read_csv("../../Liu2021_Subtyoes/DEG_SingleCell.csv") %>%
count(cluster)
df_markers_final_PR_all_biomart %>%
count(cluster)
read_csv("../../Liu2021_Subtyoes/DEG_SingleCell.csv") %>%
count(cluster)
df_markers_final_PR_all_biomart
df_markers_final_PR_all_biomart <- df_markers_final_PR_all_biomart %>%
replace_na(replace = "")
df_markers_final_PR_all_biomart
mart = useMart("ensembl", dataset="hsapiens_gene_ensembl")
#biomaRt::listAttributes(mart) %>% View
attributes_biomart <- c("external_gene_name", "description", "chromosome_name", "band")
list_genes <- df_markers_final_PR_all$gene %>% unique() #length(list_genes) # 4194
out_biomart <- getBM(attributes = attributes_biomart,
filters = "external_gene_name",
values = list_genes,
mart = mart)
out_biomart_filter <- out_biomart %>%
filter(str_detect(chromosome_name, "^CHR_", negate = T))%>%
add_count(external_gene_name) %>%
arrange(desc(n)) %>%
filter(!(description %in% c("zinc finger protein 883 [Source:NCBI gene (formerly Entrezgene);Acc:169834]",
"PRICKLE2 antisense RNA 1 [Source:HGNC Symbol;Acc:HGNC:40916]"))) %>%
dplyr::select(-n)
df_markers_final_PR_all_biomart <- df_markers_final_PR_all %>%
left_join(out_biomart_filter, by = c("gene" = "external_gene_name")) %>%
dplyr::select(cluster, gene,p_val, p_val_adj, everything())
df_markers_final_PR_all_biomart_rmNA <- df_markers_final_PR_all_biomart %>%
replace_na(replace = list(description = "", chromosome_name = "", band = ""))
write_tsv(df_markers_final_PR_all_biomart_rmNA, file = "../results/FinalTables/df_markers_Lu2020.tsv")
df_MatchingMarkers <- read_csv("../data/MatchingAnnotation_Liu_Lu.csv")
l_AnnotNotPresent <- filter(df_MatchingMarkers, is.na(Liu))$Lu
df_MatchingMarkers <- read_csv("../data/MatchingAnnotation_Liu_Lu.csv")
l_AnnotNotPresent_Liu <- filter(df_MatchingMarkers, is.na(Liu))$Lu
l_AnnotNotPresent_Lu <- filter(df_MatchingMarkers, is.na(Lu))$Liu
l_AnnotNotPresent_Liu
l_AnnotNotPresent_Lu
list_conversion_annotation <- setNames(df_MatchingMarkers$Lu, df_MatchingMarkers$Liu)
RetinalGenes_GMT_legend <- RetinalGenes_GMT %>%
mutate(term = as.character(term), ID = as.character(ID))%>%
mutate(ID = ifelse(is.na(list_conversion_annotation[ID]), yes = ID, no = list_conversion_annotation[ID]))%>%
group_by(gene) %>%
summarise(Liu_Markers = str_c(ID, collapse = "-"))
RetinalGenes_GMT_legend
df_markers_final <- df_markers_final_PR_all_biomart_rmNA
#df_markers_TopMarkers <- df_markers_final %>%
#  filter(avg_logFC > 1)
Lu_AllMarkers_legend <- df_markers_final %>%
group_by(gene) %>%
summarise(annotation = str_c(cluster, collapse = "-")) %>%
rename(Lu_AllMarkers = annotation)
df_markers_compare <- RetinalGenes_GMT_legend %>%
left_join(Lu_AllMarkers_legend, by = "gene")
df_markers_compare
l_AnnotNotPresent_Lu
l_AnnotNotPresent_Liu
l_common_AllMarkers <- sapply(1:dim(df_splitted)[1], function(i){intersect(df_splitted[[i, 2]], df_splitted[[i, 3]]) %>% str_c(collapse = "-")})
df_splitted <- df_markers_compare %>%
mutate_at(vars(contains("Markers")), str_split, pattern = "-")%>%
as.data.frame()
names(df_splitted)
l_common_AllMarkers <- sapply(1:dim(df_splitted)[1], function(i){intersect(df_splitted[[i, 2]], df_splitted[[i, 3]]) %>% str_c(collapse = "-")})
l_SetDiff_inLiu_AllMarkers_RemoveNotPresent <- sapply(1:dim(df_splitted)[1], function(i){setdiff(df_splitted[[i, 2]], df_splitted[[i, 3]])  %>% setdiff(l_AnnotNotPresent_Lu) %>% str_c(collapse = "-")})
l_SetDiff_inLu_AllMarkers_RemoveNotPresent <- sapply(1:dim(df_splitted)[1], function(i){setdiff(df_splitted[[i, 3]], df_splitted[[i, 2]]) %>% setdiff(l_AnnotNotPresent_Liu) %>% str_c(collapse = "-")})
l_common_test_AllMarkers_RemoveNotPresent <- sapply(1:dim(df_splitted)[1], function(i){
len_inter <- intersect(df_splitted[[i, 2]], df_splitted[[i, 3]]) %>% length()
len_Lu <- length(df_splitted[[i, 2]])
return(len_Lu == len_inter)
})
df_matching_AllMarkers_RemoveNotPresent <- mutate(df_markers_compare, common = l_common_AllMarkers, test_match = l_common_test_AllMarkers,
additional_Liu = l_SetDiff_inLiu_AllMarkers_RemoveNotPresent,
additional_Lu = l_SetDiff_inLu_AllMarkers_RemoveNotPresent) %>%
mutate(Matching_AllMarkers =  ifelse(test = is.na(Lu_AllMarkers), yes = "Not found as a marker",
no = ifelse(test_match == TRUE, yes = ifelse(test = additional_Lu == "", yes = "Perfect Match", no = "Other Lu annotation"),
no = ifelse(test = common == "", yes = "No match", no = "Partial Match")))) %>%
arrange(Matching_AllMarkers) %>%
select(gene, Liu_Markers, Lu_AllMarkers, Matching_AllMarkers)
df_matching_AllMarkers_RemoveNotPresent <- mutate(df_markers_compare, common = l_common_AllMarkers, test_match = l_common_test_AllMarkers_RemoveNotPresent,
additional_Liu = l_SetDiff_inLiu_AllMarkers_RemoveNotPresent,
additional_Lu = l_SetDiff_inLu_AllMarkers_RemoveNotPresent) %>%
mutate(Matching_AllMarkers =  ifelse(test = is.na(Lu_AllMarkers), yes = "Not found as a marker",
no = ifelse(test_match == TRUE, yes = ifelse(test = additional_Lu == "", yes = "Perfect Match", no = "Other Lu annotation"),
no = ifelse(test = common == "", yes = "No match", no = "Partial Match")))) %>%
arrange(Matching_AllMarkers) %>%
select(gene, Liu_Markers, Lu_AllMarkers, Matching_AllMarkers)
#View(df_matching_AllMarkers)aa
df_matching_AllMarkers_RemoveNotPresent %>% View()
#View(df_matching_AllMarkers)aa
df_matching_AllMarkers_RemoveNotPresent %>%
count(Matching_AllMarkers)
df_matching_AllMarkers_RemoveNotPresent
read_tsv("/home/clement/Documents/biblio.csv")
library(tidyverse)
read_tsv("/home/clement/Documents/biblio.csv")
citation <- read_tsv("/home/clement/Documents/biblio.csv")
citation%>%
arrange(Issue)
citation <- read_tsv("/home/clement/Documents/biblio.csv")
citation%>%
arrange(Issue)
citation
citation%>%
arrange(Issue)
library(tidyverse)
citation%>%
arrange(Issue)
citation%>%
dplyr::arrange(Issue)
citation$`Issue `
citation%>%
dplyr::arrange(`Issue `)
citation%>%
dplyr::arrange(`Issue `) %>%
write_tsv("/home/clement/Documents/biblio_sorted.csv")
library(tidyverse)
library(reshape2)
library(cowplot)
source("ggarrange_custom.R", local = TRUE)
load(file = "data/RequiredData.Rdata")
theme_set(theme_gray())
df_Lu2020_metadata <- df_Lu2020_metadata %>%
mutate(age = factor(age, levels = c("24_Day", "30_Day", "42_Day", "59_Day", "Hgw9", "Hgw11",  "Hgw12",  "Hgw13",  "Hgw14",  "Hgw15",  "Hgw16",  "Hgw17", "Hgw18",  "Hgw19",  "Hgw20",  "Hgw22",  "Hgw24",  "Hgw27", "Hpnd8", "Adult"))) %>%
mutate(umap2_CellType = factor(umap2_CellType,
levels = c("RPCs",
"Neurogenic Cells", "Retinal Ganglion Cells",
"AC/HC_Precurs", "Amacrine Cells", "Horizontal Cells",
"BC/Photo_Precurs", "Cones", "Rods", "Bipolar Cells",
"Muller Glia")))
setwd("/c/Users/LABO/FromHome/Review_TwoSubtypes/Shiny_Data_Explorer/RetinalMarkers_Lu2020_WebApp/Source")
# Load initial files
library(tidyverse)
library(reshape2)
library(cowplot)
source("ggarrange_custom.R", local = TRUE)
load(file = "data/RequiredData.Rdata")
theme_set(theme_gray())
df_Lu2020_metadata <- df_Lu2020_metadata %>%
mutate(age = factor(age, levels = c("24_Day", "30_Day", "42_Day", "59_Day", "Hgw9", "Hgw11",  "Hgw12",  "Hgw13",  "Hgw14",  "Hgw15",  "Hgw16",  "Hgw17", "Hgw18",  "Hgw19",  "Hgw20",  "Hgw22",  "Hgw24",  "Hgw27", "Hpnd8", "Adult"))) %>%
mutate(umap2_CellType = factor(umap2_CellType,
levels = c("RPCs",
"Neurogenic Cells", "Retinal Ganglion Cells",
"AC/HC_Precurs", "Amacrine Cells", "Horizontal Cells",
"BC/Photo_Precurs", "Cones", "Rods", "Bipolar Cells",
"Muller Glia")))
# Function to plot UMAP according of a GOI
fn_FeaturePlot_Lu2020 <- function(GOI){
p1 <- df_Lu2020_Norm_MarkersLiu %>%
left_join(df_Lu2020_metadata, by = "barcode") %>%
#arrange( get(GOI)) %>%
arrange(umap3_coord)%>%
ggplot(aes(x = umap1_coord, y = umap2_coord))+
geom_point(aes(color = get(GOI)), size = 0.05, alpha = 0.5)+
#ggtitle(GOI)+
scale_color_gradient(low = "white", high = "red")+
labs(color= GOI)
p2 <- df_Lu2020_Norm_MarkersLiu %>%
left_join(df_Lu2020_metadata, by = "barcode") %>%
#arrange( get(GOI)) %>%
arrange(umap2_coord)%>%
ggplot(aes(x = umap1_coord, y = umap3_coord))+
geom_point(aes(color = get(GOI)), size = 0.05, alpha = 0.5)+
#ggtitle(GOI)+
scale_color_gradient(low = "white", high = "red")+
labs(color= GOI)
p3 <- df_Lu2020_Norm_MarkersLiu %>%
left_join(df_Lu2020_metadata, by = "barcode") %>%
#arrange( get(GOI)) %>%
arrange(umap1_coord)%>%
ggplot(aes(x = umap2_coord, y = umap3_coord))+
geom_point(aes(color = get(GOI)), size = 0.05, alpha = 0.5)+
#ggtitle(GOI)+
scale_color_gradient(low = "white", high = "red")+
labs(color= GOI)
return(ggarrange(plotlist = list(p1, p2, p3), common.legend = T, ncol = 1))
}
fn_FeaturePlot_Lu2020("GNAT2")
# Function get counting data + for AgeDitOkit
fn_data_Counting <- function(list_genes, l_groupingvars = c("umap2_CellType", "age")){
df <- df_Lu2020_Norm_MarkersLiu %>%
select(barcode, eval(list_genes)) %>%
left_join(select(df_Lu2020_metadata, barcode, eval(l_groupingvars)), by = "barcode") %>%
group_by_(.dots = l_groupingvars) %>%
add_tally()%>%
rename(TotalCells = n) %>%
ungroup()%>%
melt(variable.name = "Gene", value.name = "NormExp", id.vars = c("barcode", "TotalCells", l_groupingvars))%>%
ungroup() %>%
group_by_(.dots = c(l_groupingvars, "Gene", "TotalCells")) %>%
summarise(Mean = mean(NormExp), count_expressing = sum(NormExp != 0)) %>%
mutate(percent_expressing = 100*count_expressing/TotalCells) %>%
arrange(Gene)
return(df)
}
fn_data_Counting(c("GNAT2")) %>% View()
